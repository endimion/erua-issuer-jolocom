{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, makeSealSession, makeSealSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport { vcTypes } from \"../../../config/vcTypes\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../utils/isMobile\";\n\nclass IssueKYB extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.eidas !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sessionId;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.endpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sessionId = req.session.sealSession;\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sessionId = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sessionId));\n    }\n\n    if (sessionId) {\n      reduxStore.dispatch(setSealSession(sessionId));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      //TODO clean this up\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect); /// \n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.startSealSessionAndDidAuth(this.props.baseUrl, \"eidas\", isMobile()); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, \"eidas\", isMobile());\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.DID & !this.hasRequiredAttributes) {\n      //if DID auth is completed\n      // register the callbackUri to the SessionManager\n      let postUrl = this.props.baseUrl ? `${this.props.baseUrl}seal/update-session` : \"/seal/update-session\";\n      axios.post(postUrl, {\n        sessionId: this.props.sealSession,\n        variableName: \"ClientCallbackAddr\",\n        variableValue: this.props.eidasRedirectUri\n      }).then(data => {\n        console.log(\"eidas.js:: session updated\");\n      });\n    }\n  }\n\n  proceedWithEidasAuth() {\n    //make msToken\n    console.log(\"proceedWithEidasAuth \");\n    axios.get(`${this.props.baseUrl}/seal/make-eidas-token?sessionId=${this.props.sealSession}`).then(data => {\n      console.log(`proceedWithEidasAuth the data is::`);\n      console.log(data);\n      window.location.href = `https://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n      return null;\n    });\n  }\n\n  render() {\n    let stepNumber = this.props.vcSent ? 2 : !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Authenticate over \"eIDAS-eID\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        sealSession: this.props.sealSession\n      }));\n    }\n\n    let eIDASLoginButton = !this.hasRequiredAttributes ? __jsx(Button, {\n      onClick: this.proceedWithEidasAuth\n    }, \"eIDAS\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"eIDAS\");\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.hasRequiredAttributes // vcIssuanceEndpoint={\"/issueVCSecure\"}\n      ,\n      baseUrl: this.props.baseUrl // user attributes are not required as they are already in the backend\n      // only the type of the VC should be provided here\n      // vcAttributes={this.props.userSelection}\n      ,\n      uuid: this.props.sealSession,\n      vcType: vcTypes.eidas\n    });\n\n    let eidasCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue an eIDAS based Verifiable Credential\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, eIDASLoginButton), __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.serverSessionId,\n      card: eidasCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      credQROffer: this.props.credQROffer\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    credQROffer: state.credQROffer\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setEidasToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n    setEidasRedirect: uri => {\n      dispatch(setEidasRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueKYB);","map":{"version":3,"sources":["/home/ni/code/js/grids-DC/pages/vc/issue/kyb.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","setServerSessionId","completeDIDAuth","makeSealSession","makeSealSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","vcTypes","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","ConnectMobile","isMobile","IssueKYB","Component","constructor","props","dispatch","isFetching","sessionData","proceedWithEidasAuth","bind","hasRequiredAttributes","undefined","eidas","getInitialProps","reduxStore","req","userSessionData","DIDOk","sessionId","session","userData","endpoint","baseUrl","id","DID","sealSession","eidasUri","eidasPort","eidasRedirectUri","getState","console","log","qrData","vcSent","componentDidMount","toSelect","setEidasToSelection","startSealSessionAndDidAuth","makeConnectionRequest","componentDidUpdate","postUrl","post","variableName","variableValue","then","data","get","window","location","href","additionalData","render","stepNumber","stepperSteps","title","uuid","serverSessionId","eIDASLoginButton","issueVCBut","eidasCard","marginTop","result","credQROffer","mapStateToProps","state","fetching","userSelection","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","vcType","didAuthOK","startSealSession","setTheSealSession","setEidas","uri","setEidasRedirect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSealSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport {vcTypes} from \"../../../config/vcTypes\"\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../utils/isMobile\";\n\n\nclass IssueKYB extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithEidasAuth = this.proceedWithEidasAuth.bind(this);\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.eidas !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sessionId;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.endpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.id));\n      DIDOk = req.session.DID;\n      sessionId = req.session.sealSession;\n      reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri));\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sessionId = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sessionId));\n    }\n    if (sessionId) {\n      reduxStore.dispatch(setSealSession(sessionId));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      \n      //TODO clean this up\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect);\n      /// \n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        // console.log(\"startSealSessionAndDidAuth\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.startSealSessionAndDidAuth(\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        ); //and then makeConnectionRequest\n      } else {\n        // console.log(\"makeConnectionRequest\")\n        console.log(`isMobile ${isMobile()}`);\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          \"eidas\",\n          isMobile()\n        );\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.DID & !this.hasRequiredAttributes) {\n      //if DID auth is completed\n      // register the callbackUri to the SessionManager\n      let postUrl = this.props.baseUrl?`${this.props.baseUrl}seal/update-session`:\"/seal/update-session\"\n      axios\n        .post(postUrl, {\n          sessionId: this.props.sealSession,\n          variableName: \"ClientCallbackAddr\",\n          variableValue: this.props.eidasRedirectUri,\n        })\n        .then((data) => {\n          console.log(\"eidas.js:: session updated\");\n        });\n    }\n  }\n\n  proceedWithEidasAuth() {\n    //make msToken\n    console.log(\"proceedWithEidasAuth \");\n    axios\n      .get(\n        `${this.props.baseUrl}/seal/make-eidas-token?sessionId=${this.props.sealSession}`\n      )\n      .then((data) => {\n        console.log(`proceedWithEidasAuth the data is::`);\n        console.log(data);\n\n        window.location.href = `https://${this.props.eidasUri}:${this.props.eidasPort}/eidas-idp/is/query?msToken=${data.data.additionalData}`;\n        return null;\n      });\n  }\n\n  render() {\n    let stepNumber = this.props.vcSent\n      ? 2\n      : !this.props.DID\n      ? 0\n      : this.hasRequiredAttributes\n      ? 2\n      : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: 'Authenticate over \"eIDAS-eID\"' },\n      { title: \"Request Issuance\" },\n    ];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.serverSessionId}\n            sealSession={this.props.sealSession}\n          />\n        </Layout>\n      );\n    }\n\n    let eIDASLoginButton = !this.hasRequiredAttributes ? (\n      <Button onClick={this.proceedWithEidasAuth}>eIDAS</Button>\n    ) : (\n      <Button variant=\"primary\" disabled>\n        eIDAS\n      </Button>\n    );\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        // vcIssuanceEndpoint={\"/issueVCSecure\"}\n        baseUrl={this.props.baseUrl}\n        // user attributes are not required as they are already in the backend\n        // only the type of the VC should be provided here\n        // vcAttributes={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={vcTypes.eidas}\n      />\n    );\n\n    let eidasCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>Issue an eIDAS based Verifiable Credential</Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Once you have authenticated through the required data sources, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{eIDASLoginButton}</Col>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.serverSessionId}\n        card={eidasCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n        credQROffer={this.props.credQROffer}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sealSession: state.sealSession,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    credQROffer: state.credQROffer,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setEidasToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeOnlyConnectionRequest(sealSession, baseUrl, vcType, isMobile)\n      );\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSealSessionAndDidAuth: (baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile)\n      );\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n\n    setEidasRedirect: (uri) => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueKYB);\n"]},"metadata":{},"sourceType":"module"}