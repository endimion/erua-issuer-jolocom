{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nvar SSE = /*#__PURE__*/function (_React$Component) {\n  _inherits(SSE, _React$Component);\n\n  var _super = _createSuper(SSE);\n\n  function SSE(props) {\n    var _this;\n\n    _classCallCheck(this, SSE);\n\n    _this = _super.call(this, props);\n    _this.dispatch = props.dispatch;\n    _this.session = props.session;\n    return _this;\n  }\n\n  _createClass(SSE, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.eventSource = new EventSource(\"/events\"); //listening for \"event\" type events\n      // as set by the server at ::  res.write(`event: event\\n`);\n\n      this.eventSource.addEventListener(\"event\", function (evt) {\n        var data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n        // Use data here\n\n        var eventData = JSON.parse(data);\n        console.log(eventData);\n\n        if (eventData.sessionId && _this2.props.serverSessionId) {\n          console.log(\"SSE.js -- componentDidMount:: got \".concat(eventData.sessionId, \" and the current session id is \").concat(_this2.props.serverSessionId));\n\n          if (eventData.sessionId === _this2.props.serverSessionId) {\n            console.log(\"SSE.js -- componentDidMount:: sessionsMatch!!\");\n            console.log(\"SSE.js -- componentDidMount:: uuid: \".concat(eventData.uuid));\n\n            _this2.props.didAuthOK(eventData.uuid, _this2.props.sealSession);\n          }\n        } // if there is no current session in the client\n        // and the server sends a new session event\n\n\n        if (!_this2.props.uuid) {\n          console.log(\" no active session found!\");\n        } else {\n          console.log(\"SSE.js:: found uuid \".concat(_this2.props.uuid));\n          console.log(\"SSE.js:: sent status \".concat(eventData.status)); //check if event is about this client\n\n          if (_this2.props.uuid === eventData.uuid) {\n            switch (eventData.status) {\n              case \"sent\":\n                console.log(\"SSE.js:: VC sent to user\");\n\n                _this2.props.vcSent();\n\n                return \"\";\n\n              default:\n                console.log(\"SSE.js:: default\");\n            }\n          } else {\n            console.log(\"SSE.js:: the uuid is about \".concat(eventData.uuid, \" but i have \").concat(_this2.props.uuid));\n          }\n        }\n      }, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null);\n    } //..render...\n\n  }]);\n\n  return SSE;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    vcSent: function vcSent() {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: function didAuthOK(uuid, sealSession) {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);","map":null,"metadata":{},"sourceType":"module"}