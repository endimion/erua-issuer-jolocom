{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl, setServerSessionId, completeDIDAuth, setEidasUriPort, setEidasRedirectUri, setSessionId } from \"../../../store\";\nimport { vcTypes } from \"../../../config/vcTypes\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../utils/isMobile\";\n\nclass IssueKYB extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sessionId;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.endpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.sessionId));\n      reduxStore.dispatch(setSessionId(req.session.sessionId));\n      DIDOk = true; //req.session.DID;\n\n      sessionId = req.session.sessionId;\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sessionId));\n    }\n\n    if (sessionId) {\n      reduxStore.dispatch(setSessionId(sessionId));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sessionId: reduxStore.getState().sessionId\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      //TODO clean this up\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect); ///\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      this.props.makeConnectionRequest(this.props.sessionId, this.props.baseUrl, \"eidas\", isMobile());\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.DID & !this.hasRequiredAttributes) {// //if DID auth is completed\n      // // register the callbackUri to the SessionManager\n      // let postUrl = this.props.baseUrl\n      //   ? `${this.props.baseUrl}seal/update-session`\n      //   : \"/seal/update-session\";\n      // axios\n      //   .post(postUrl, {\n      //     sessionId: this.props.sealSession,\n      //     variableName: \"ClientCallbackAddr\",\n      //     variableValue: this.props.eidasRedirectUri,\n      //   })\n      //   .then((data) => {\n      //     console.log(\"eidas.js:: session updated\");\n      //   });\n    }\n  }\n\n  render() {\n    let stepNumber = this.props.vcSent ? 2 : !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: \"Generate VC\"\n    }, {\n      title: \"Accept Request on your Mobile Wallet\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(\"div\", null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.serverSessionId,\n        sealSession: this.props.sessionId\n      }));\n    }\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.hasRequiredAttributes // vcIssuanceEndpoint={\"/issueVCSecure\"}\n      ,\n      baseUrl: this.props.baseUrl // user attributes are not required as they are already in the backend\n      // only the type of the VC should be provided here\n      // vcAttributes={this.props.userSelection}\n      ,\n      uuid: this.props.sessionId,\n      vcType: vcTypes.kyb\n    });\n\n    let promptCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Generate a Portable  KYB Profile using Verifiable Credentials\"), __jsx(Card.Body, null, __jsx(Card.Text, null, \"Click the following button to generate your KYB Profile Verifiable Credential. Next, scan the generated QR code to receive the VC on your mobile wallet app.\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.serverSessionId,\n      card: promptCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sessionId,\n      credQROffer: this.props.credQROffer\n    });\n\n    return __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sessionId: state.sessionId,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    credQROffer: state.credQROffer\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setEidasToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sessionId, baseUrl, vcType, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sessionId, baseUrl, vcType, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueKYB);","map":{"version":3,"sources":["/home/ni/code/js/grids-DC/pages/vc/issue/kyb.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","setServerSessionId","completeDIDAuth","setEidasUriPort","setEidasRedirectUri","setSessionId","vcTypes","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","ConnectMobile","isMobile","IssueKYB","Component","constructor","props","dispatch","isFetching","sessionData","hasRequiredAttributes","undefined","getInitialProps","reduxStore","req","userSessionData","DIDOk","sessionId","session","userData","endpoint","baseUrl","qrData","getState","vcSent","componentDidMount","eidas","toSelect","setEidasToSelection","DID","makeConnectionRequest","componentDidUpdate","render","stepNumber","stepperSteps","title","uuid","serverSessionId","issueVCBut","kyb","promptCard","marginTop","result","credQROffer","mapStateToProps","state","fetching","userSelection","eidasUri","eidasPort","eidasRedirectUri","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","vcType","didAuthOK"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  setServerSessionId,\n  completeDIDAuth,\n  setEidasUriPort,\n  setEidasRedirectUri,\n  setSessionId,\n} from \"../../../store\";\nimport { vcTypes } from \"../../../config/vcTypes\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport isMobile from \"../../../utils/isMobile\";\n\nclass IssueKYB extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined ;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sessionId;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.endpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      reduxStore.dispatch(setServerSessionId(req.session.sessionId));\n      reduxStore.dispatch(setSessionId(req.session.sessionId));\n      DIDOk = true//req.session.DID;\n      sessionId = req.session.sessionId;\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sessionId));\n    }\n    if (sessionId) {\n      reduxStore.dispatch(setSessionId(sessionId));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sessionId: reduxStore.getState().sessionId,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.eidas) {\n      //TODO clean this up\n      let toSelect = [this.props.sessionData.eidas];\n      this.props.setEidasToSelection(toSelect);\n      ///\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      this.props.makeConnectionRequest(\n        this.props.sessionId,\n        this.props.baseUrl,\n        \"eidas\",\n        isMobile()\n      );\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.DID & !this.hasRequiredAttributes) {\n      // //if DID auth is completed\n      // // register the callbackUri to the SessionManager\n      // let postUrl = this.props.baseUrl\n      //   ? `${this.props.baseUrl}seal/update-session`\n      //   : \"/seal/update-session\";\n      // axios\n      //   .post(postUrl, {\n      //     sessionId: this.props.sealSession,\n      //     variableName: \"ClientCallbackAddr\",\n      //     variableValue: this.props.eidasRedirectUri,\n      //   })\n      //   .then((data) => {\n      //     console.log(\"eidas.js:: session updated\");\n      //   });\n    }\n  }\n\n\n\n  render() {\n    let stepNumber = this.props.vcSent\n      ? 2\n      : !this.props.DID\n      ? 0\n      : this.hasRequiredAttributes\n      ? 2\n      : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: \"Generate VC\" },\n      { title: \"Accept Request on your Mobile Wallet\" },\n    ];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <div>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.serverSessionId}\n            sealSession={this.props.sessionId}\n          />\n        </div>\n      );\n    }\n\n   \n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        // vcIssuanceEndpoint={\"/issueVCSecure\"}\n        baseUrl={this.props.baseUrl}\n        // user attributes are not required as they are already in the backend\n        // only the type of the VC should be provided here\n        // vcAttributes={this.props.userSelection}\n        uuid={this.props.sessionId}\n        vcType={vcTypes.kyb}\n      />\n    );\n\n    let promptCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>Generate a Portable  KYB Profile using Verifiable Credentials</Card.Header>\n        <Card.Body>\n          {/* <Card.Title>\n            {this.hasRequiredAttributes\n              ? `Click the following button to generate your KYB Profile Verifiable Credential. \n              Next, scan the generated QR code to receive the VC on your mobile wallet app. `\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title> */}\n          <Card.Text>\n          Click the following button to generate your KYB Profile Verifiable Credential. \n              Next, scan the generated QR code to receive the VC on your mobile wallet app.\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.serverSessionId}\n        card={promptCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sessionId}\n        credQROffer={this.props.credQROffer}\n      />\n    );\n\n    return (\n      <div className=\"container\">\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n       \n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.baseUrl,\n    DID: state.DID,\n    serverSessionId: state.serverSessionId,\n    uuid: state.uuid,\n    vcSent: state.vcSent,\n    sessionId: state.sessionId,\n    eidasUri: state.eidasUri,\n    eidasPort: state.eidasPort,\n    endpoint: state.endpoint,\n    eidasRedirectUri: state.eidasRedirectUri,\n    credQROffer: state.credQROffer,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setEidasToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sessionId, baseUrl, vcType, isMobile) => {\n      dispatch(\n        makeOnlyConnectionRequest(sessionId, baseUrl, vcType, isMobile)\n      );\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueKYB);\n"]},"metadata":{},"sourceType":"module"}