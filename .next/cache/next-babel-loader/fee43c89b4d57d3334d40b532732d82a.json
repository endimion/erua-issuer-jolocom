{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nclass SSE extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.session = props.session;\n  }\n\n  componentDidMount() {\n    this.eventSource = new EventSource(`/events`); //listening for \"event\" type events\n    // as set by the server at ::  res.write(`event: event\\n`);\n\n    this.eventSource.addEventListener(\"event\", evt => {\n      const data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n      // Use data here\n\n      let eventData = JSON.parse(data);\n      console.log(eventData);\n\n      if (eventData.sessionId && this.props.serverSessionId) {\n        console.log(`SSE.js -- componentDidMount:: got ${eventData.sessionId} and the current session id is ${this.props.serverSessionId}`);\n\n        if (eventData.sessionId === this.props.serverSessionId) {\n          console.log(`SSE.js -- componentDidMount:: sessionsMatch!!`);\n          console.log(`SSE.js -- componentDidMount:: uuid: ${eventData.uuid}`);\n          this.props.didAuthOK(eventData.uuid, this.props.sealSession);\n        }\n      } // if there is no current session in the client\n      // and the server sends a new session event\n\n\n      if (!this.props.uuid) {\n        console.log(\" no active session found!\");\n      } else {\n        console.log(`SSE.js:: found uuid ${this.props.uuid}`);\n        console.log(`SSE.js:: sent status ${eventData.status}`); //check if event is about this client\n\n        if (this.props.uuid === eventData.uuid) {\n          switch (eventData.status) {\n            case \"sent\":\n              console.log(\"SSE.js:: VC sent to user\");\n              this.props.vcSent();\n              return \"\";\n\n            default:\n              console.log(\"SSE.js:: default\");\n          }\n        } else {\n          console.log(`SSE.js:: the uuid is about ${eventData.uuid} but i have ${this.props.uuid}`);\n        }\n      }\n    }, false);\n  }\n\n  render() {\n    return __jsx(\"div\", null);\n  } //..render...\n\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    vcSent: () => {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: (uuid, sealSession) => {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);","map":null,"metadata":{},"sourceType":"module"}