module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../next-server/lib/utils":
/*!*****************************************************!*\
  !*** external "next/dist/next-server/lib/utils.js" ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/utils.js");

/***/ }),

/***/ "./lib/with-redux-store.js":
/*!*********************************!*\
  !*** ./lib/with-redux-store.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store */ "./store.js");
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const isServer = true;
const __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';

function getOrCreateStore(initialState) {
  // Always make a new store if server, otherwise state is shared between requests
  if (isServer) {
    return Object(_store__WEBPACK_IMPORTED_MODULE_1__["initializeStore"])(initialState);
  } // Create store if unavailable on the client and set it on the window object


  if (!window[__NEXT_REDUX_STORE__]) {
    window[__NEXT_REDUX_STORE__] = Object(_store__WEBPACK_IMPORTED_MODULE_1__["initializeStore"])(initialState);
  }

  return window[__NEXT_REDUX_STORE__];
}

const theApp = App => {
  return class AppWithRedux extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {
    static async getInitialProps(appContext) {
      // Get or Create the store with `undefined` as initialState
      // This allows you to set a custom default initialState
      const reduxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages

      appContext.ctx.reduxStore = reduxStore;
      let appProps = {};

      if (typeof App.getInitialProps === 'function') {
        appProps = await App.getInitialProps(appContext);
      }

      return _objectSpread(_objectSpread({}, appProps), {}, {
        initialReduxState: reduxStore.getState()
      });
    }

    constructor(props) {
      super(props);
      this.reduxStore = getOrCreateStore(props.initialReduxState);
    }

    render() {
      return __jsx(App, _extends({}, this.props, {
        reduxStore: this.reduxStore
      }));
    }

  };
};

/* harmony default export */ __webpack_exports__["default"] = (theApp);

/***/ }),

/***/ "./model/userSelection.js":
/*!********************************!*\
  !*** ./model/userSelection.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return UserSelection; });
class UserSelection {
  constructor(key, source) {
    this.source = source; // denotes the source, i.e. eIDAS, edugain etc

    this.key = key; //denotes attribute name e.g. personIdentifier
  }

}

/***/ }),

/***/ "./node_modules/next/app.js":
/*!**********************************!*\
  !*** ./node_modules/next/app.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/pages/_app */ "./node_modules/next/dist/pages/_app.js")


/***/ }),

/***/ "./node_modules/next/dist/pages/_app.js":
/*!**********************************************!*\
  !*** ./node_modules/next/dist/pages/_app.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.Container = Container;
exports.createUrl = createUrl;
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../next-server/lib/utils */ "../next-server/lib/utils");

exports.AppInitialProps = _utils.AppInitialProps;
exports.NextWebVitalsMetric = _utils.NextWebVitalsMetric;
/**
* `App` component is used for initialize of pages. It allows for overwriting and full control of the `page` initialization.
* This allows for keeping state between navigation, custom error handling, injecting additional data.
*/

async function appGetInitialProps({
  Component,
  ctx
}) {
  const pageProps = await (0, _utils.loadGetInitialProps)(Component, ctx);
  return {
    pageProps
  };
}

class App extends _react.default.Component {
  // Kept here for backwards compatibility.
  // When someone ended App they could call `super.componentDidCatch`.
  // @deprecated This method is no longer needed. Errors are caught at the top level
  componentDidCatch(error, _errorInfo) {
    throw error;
  }

  render() {
    const {
      router,
      Component,
      pageProps,
      __N_SSG,
      __N_SSP
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(Component, Object.assign({}, pageProps, // we don't add the legacy URL prop if it's using non-legacy
    // methods like getStaticProps and getServerSideProps
    !(__N_SSG || __N_SSP) ? {
      url: createUrl(router)
    } : {}));
  }

}

exports.default = App;
App.origGetInitialProps = appGetInitialProps;
App.getInitialProps = appGetInitialProps;
let warnContainer;
let warnUrl;

if (true) {
  warnContainer = (0, _utils.execOnce)(() => {
    console.warn(`Warning: the \`Container\` in \`_app\` has been deprecated and should be removed. https://err.sh/vercel/next.js/app-container-deprecated`);
  });
  warnUrl = (0, _utils.execOnce)(() => {
    console.error(`Warning: the 'url' property is deprecated. https://err.sh/vercel/next.js/url-deprecated`);
  });
} // @deprecated noop for now until removal


function Container(p) {
  if (true) warnContainer();
  return p.children;
}

function createUrl(router) {
  // This is to make sure we don't references the router object at call time
  const {
    pathname,
    asPath,
    query
  } = router;
  return {
    get query() {
      if (true) warnUrl();
      return query;
    },

    get pathname() {
      if (true) warnUrl();
      return pathname;
    },

    get asPath() {
      if (true) warnUrl();
      return asPath;
    },

    back: () => {
      if (true) warnUrl();
      router.back();
    },
    push: (url, as) => {
      if (true) warnUrl();
      return router.push(url, as);
    },
    pushTo: (href, as) => {
      if (true) warnUrl();
      const pushRoute = as ? href : '';
      const pushUrl = as || href;
      return router.push(pushRoute, pushUrl);
    },
    replace: (url, as) => {
      if (true) warnUrl();
      return router.replace(url, as);
    },
    replaceTo: (href, as) => {
      if (true) warnUrl();
      const replaceRoute = as ? href : '';
      const replaceUrl = as || href;
      return router.replace(replaceRoute, replaceUrl);
    }
  };
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var next_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/app */ "./node_modules/next/app.js");
/* harmony import */ var next_app__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_app__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _lib_with_redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/with-redux-store */ "./lib/with-redux-store.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_3__);
var __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;





class MyApp extends next_app__WEBPACK_IMPORTED_MODULE_0___default.a {
  render() {
    const {
      Component,
      pageProps,
      reduxStore
    } = this.props;
    return __jsx(react_redux__WEBPACK_IMPORTED_MODULE_3__["Provider"], {
      store: reduxStore
    }, __jsx(Component, pageProps));
  }

}

/* harmony default export */ __webpack_exports__["default"] = (Object(_lib_with_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(MyApp));

/***/ }),

/***/ "./store.js":
/*!******************!*\
  !*** ./store.js ***!
  \******************/
/*! exports provided: actionTypes, loginClicked, setStepperSteps, setBaseUrl, startSession, setServerSessionId, setSessionData, setUserAttributeSelection, updateSession, setEndpoint, addToSelection, addSetToSelection, removeFromSelection, vcSentToUser, increaseCardIndex, decreaseCardIndex, requestVCgeneration, makeConnectionRequest, completeDIDAuth, makeAndPushVC, requestVC, setSealSession, setSessionId, makeSealSession, makeOnlyConnectionRequest, makeSealSessionWithDIDConnecetionRequest, setDidCallback, setEidasUriPort, setEidasRedirectUri, setEdugainRedirectUri, setEdugainUriPort, initializeStore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"actionTypes\", function() { return actionTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loginClicked\", function() { return loginClicked; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setStepperSteps\", function() { return setStepperSteps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setBaseUrl\", function() { return setBaseUrl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startSession\", function() { return startSession; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setServerSessionId\", function() { return setServerSessionId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSessionData\", function() { return setSessionData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setUserAttributeSelection\", function() { return setUserAttributeSelection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateSession\", function() { return updateSession; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEndpoint\", function() { return setEndpoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addToSelection\", function() { return addToSelection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addSetToSelection\", function() { return addSetToSelection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeFromSelection\", function() { return removeFromSelection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vcSentToUser\", function() { return vcSentToUser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"increaseCardIndex\", function() { return increaseCardIndex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decreaseCardIndex\", function() { return decreaseCardIndex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requestVCgeneration\", function() { return requestVCgeneration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeConnectionRequest\", function() { return makeConnectionRequest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"completeDIDAuth\", function() { return completeDIDAuth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeAndPushVC\", function() { return makeAndPushVC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"requestVC\", function() { return requestVC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSealSession\", function() { return setSealSession; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSessionId\", function() { return setSessionId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeSealSession\", function() { return makeSealSession; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeOnlyConnectionRequest\", function() { return makeOnlyConnectionRequest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeSealSessionWithDIDConnecetionRequest\", function() { return makeSealSessionWithDIDConnecetionRequest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setDidCallback\", function() { return setDidCallback; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEidasUriPort\", function() { return setEidasUriPort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEidasRedirectUri\", function() { return setEidasRedirectUri; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEdugainRedirectUri\", function() { return setEdugainRedirectUri; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setEdugainUriPort\", function() { return setEdugainUriPort; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initializeStore\", function() { return initializeStore; });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"redux\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redux__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var redux_devtools_extension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux-devtools-extension */ \"redux-devtools-extension\");\n/* harmony import */ var redux_devtools_extension__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(redux_devtools_extension__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux-thunk */ \"redux-thunk\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_thunk__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _model_userSelection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/userSelection */ \"./model/userSelection.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nconst initialState = {\n  count: 0,\n  qrData: null,\n  fetching: false,\n  requestSignature: null,\n  sessionData: null,\n  serverSessionId: null,\n  sessionId: null,\n  uuid: null,\n  vcSent: false,\n  userSelection: [],\n  // the attributes selected by the user to be included in a VC,\n  endpoint: null,\n  // the backend server url root.\n  cardIndex: 1,\n  stepperSteps: [],\n  baseUrl: \"\",\n  DID: false,\n  //boolean, denoting that DID connection response has been received for this session\n  sealSession: \"\",\n  didAuthCallback: \"\",\n  // callback address set by the caller to redirect to after DID auth,\n  eidasUri: \"\",\n  eidasPort: \"\",\n  eidasRedirectUri: \"\",\n  edugainUri: \"\",\n  edugainPort: \"\",\n  edugainRedirectUri: \"\",\n  vcFailed: false,\n  credQROffer: \"\"\n};\nconst actionTypes = {\n  GET_QR_AUTH_RESPONSE: \"GET_QR_AUTH_RESPONSE\",\n  MAKE_QR_AUTH_REQUEST: \"MAKE_QR_AUTH_REQUEST\",\n  MAKE_VC_QR_REQUEST: \"MAKE_VC_QR_REQUEST\",\n  //make a request to generate a VC based on the selected attributes\n  GET_VC_QR_RESPONSE: \"GET_VC_QR_REQUEST\",\n  SET_ATTRIBUTES_SELECTION: \"SET_ATTRIBUTES_SELECTION\",\n  //adds an array as the user  selected attirubtes\n  ADD_SET_TO_ATTRIBUTES_SELECTION: \"ADD_SET_TO_ATTRIBUTES_SELECTION\",\n  //adds the payload to the userSelection\n  ADD_ATTRIBUTES_TO_SELECTION: \"ADD_ATTRIBUTES_TO_SELECTION\",\n  //adds the payload to the userSelection\n  // the selection takes place using identifiers from the session\n  // that are meaningful to the backend\n  REMOVE_ATTRIBUTE_FROM_SELECTION: \"REMOVE_ATTRIBUTE_FROM_SELECTION\",\n  SET_SERVER_SESSION_DATA: \"SET_SERVER_SESSION_DATA\",\n  SET_SERVER_SESSION_ID: \"SET_SERVER_SESSION_ID\",\n  VC_SENT_TO_USER: \"VC_SENT_TO_USER\",\n  SET_ENDPOINT: \"SET_END_POINT\",\n  //\n  INCREASE_CARD_INDEX: \"INCREASE_CARD_INDEX\",\n  DECREASE_CARD_INDEX: \"DECREASE_CARD_INDEX\",\n  //\n  SET_STEPPER_STEPS: \"SET_STEPPER_STEPS\",\n  //\n  SET_BASE_URL: \"SET_BASE_URL\",\n  //\n  SET_DID_TRUE: \"SES_DID_TRUE\",\n  SET_SEAL_SESSION: \"SET_SEAL_SESSION\",\n  SET_SESSION_ID: \"SET_SE\",\n  SET_CALLBACK: \"SET_CALLBACK\",\n  SET_EIDAS_URI_PORT: \"SET_EIDAS_URI_PORT\",\n  SET_EIDAS_REDIRECT_URI: \"SET_EIDAS_REDIRECT_URI\",\n  SET_EDUGAIN_URI_PORT: \"SET_EDUGAIN_URI_PORT\",\n  SET_EDUGAIN_REDIRECT_URI: \"SET_EDUGAIN_REDIRECT_URI\",\n  VC_ISSUE_FAILED: \"VC_ISSUE_FAILED\",\n  JOLO_VC_GENERATED: \"JOLO_VC_GENERATED\"\n}; // REDUCERS\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.JOLO_VC_GENERATED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        credQROffer: action.data\n      });\n\n    case actionTypes.VC_ISSUE_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        vcFailed: true\n      });\n\n    case actionTypes.SET_EDUGAIN_REDIRECT_URI:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        edugainRedirectUri: action.data\n      });\n\n    case actionTypes.SET_EDUGAIN_URI_PORT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        edugainUri: action.data.uri,\n        edugainPort: action.data.port\n      });\n\n    case actionTypes.SET_EIDAS_REDIRECT_URI:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        eidasRedirectUri: action.data\n      });\n\n    case actionTypes.SET_EIDAS_URI_PORT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        eidasUri: action.data.uri,\n        eidasPort: action.data.port\n      });\n\n    case actionTypes.SET_CALLBACK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        didAuthCallback: action.data\n      });\n\n    case actionTypes.SET_SEAL_SESSION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sealSession: action.data\n      });\n\n    case actionTypes.SET_SESSION_ID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sessionId: action.data\n      });\n\n    case actionTypes.SET_DID_TRUE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        DID: true,\n        uuid: action.data\n      });\n\n    case actionTypes.SET_BASE_URL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        baseUrl: action.data\n      });\n\n    case actionTypes.SET_STEPPER_STEPS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stepperSteps: action.data\n      });\n\n    case actionTypes.INCREASE_CARD_INDEX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cardIndex: state.cardIndex + 1\n      });\n\n    case actionTypes.DECREASE_CARD_INDEX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cardIndex: state.cardIndex - 1\n      });\n\n    case actionTypes.SET_ENDPOINT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        endpoint: action.data\n      });\n\n    case actionTypes.VC_SENT_TO_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        vcSent: true\n      });\n\n    case actionTypes.SET_SERVER_SESSION_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sessionData: action.data // userEduGain: action.data.eduGAIN,\n        // userEidas: action.data.eidas,\n\n      });\n\n    case actionTypes.GET_QR_AUTH_RESPONSE:\n      // console.log(action.data);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetching: false,\n        qrData: action.data.qr,\n        uuid: action.data.uuid,\n        requestSignature: action.data.signature\n      });\n\n    case actionTypes.SET_ATTRIBUTES_SELECTION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userSelection: action.data\n      });\n\n    case actionTypes.MAKE_QR_AUTH_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetching: true,\n        vcSent: false\n      });\n\n    case actionTypes.ADD_ATTRIBUTES_TO_SELECTION:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userSelection: [...state.userSelection, action.data]\n        });\n      }\n\n    case actionTypes.ADD_SET_TO_ATTRIBUTES_SELECTION:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userSelection: [...state.userSelection, ...action.data]\n        });\n      }\n\n    case actionTypes.SET_SERVER_SESSION_ID:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          serverSessionId: action.data\n        });\n      }\n\n    case actionTypes.REMOVE_ATTRIBUTE_FROM_SELECTION:\n      let newSelection = [...state.userSelection.filter((el, ind) => {\n        return ind !== action.index;\n      })];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userSelection: newSelection\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\n\nfunction loginClicked() {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.get(\"connectionRequest\").then(data => {\n      console.log(\"got the data form the server\");\n      console.log(data.data);\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data\n      });\n    });\n  }; // return dispatch => axios.get('https://38da089e.ngrok.io/connectionRequest')\n  //     .then(({ data }) => data)\n  //     .then(items => dispatch({ type: actionTypes.MAKE_QR_AUTH_REQUEST, items }))\n  //     .then( () =>{\n  //       console.log(\"got there\")\n  //         return dispatch({ type: actionTypes.GET_QR_AUTH_RESPONSE, data:'these are my awesome data' })\n  //     });\n} // export function setDIDTrue() {\n//   return dispatch => {\n//     dispatch({\n//       type: actionTypes.SET_DID_TRUE\n//     });\n//   };\n// }\n\nfunction setStepperSteps(steps) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_STEPPER_STEPS,\n      data: steps\n    });\n  };\n}\nfunction setBaseUrl(baseUrl) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_BASE_URL,\n      data: baseUrl\n    });\n  };\n}\nfunction startSession(sessionId, sessionStatus) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.START_SESSION,\n      data: {\n        sessionId: sessionId,\n        status: sessionStatus\n      }\n    });\n  };\n}\nfunction setServerSessionId(sessionId) {\n  return dispatch => {\n    // console.log(\"store.js setServerSessionId with \" +sessionId)\n    dispatch({\n      type: actionTypes.SET_SERVER_SESSION_ID,\n      data: sessionId\n    });\n  };\n}\nfunction setSessionData(sessionData) {\n  return dispatch => {\n    // console.log(`store.js setSessionData called with::`);\n    // console.log(sessionData)\n    dispatch({\n      type: actionTypes.SET_SERVER_SESSION_DATA,\n      data: sessionData\n    });\n  };\n}\nfunction setUserAttributeSelection(selectedAttributes) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_ATTRIBUTES_SELECTION,\n      data: selectedAttributes\n    });\n  };\n}\nfunction updateSession(sessionStatus) {\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.UPDATE_SESSION,\n      data: {\n        status: sessionStatus\n      }\n    };\n    dispatch(toDispatch);\n  };\n}\nfunction setEndpoint(endpoint) {\n  console.log(\"store.js setting endpoint to \" + endpoint);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.SET_ENDPOINT,\n      data: endpoint\n    };\n    dispatch(toDispatch);\n  };\n}\nfunction addToSelection(index, source) {\n  // console.log(`store.js:: will add to seleciton ${index} , ${source}`);\n  const data = new _model_userSelection__WEBPACK_IMPORTED_MODULE_4__[\"default\"](index, source);\n  return dispatch => {\n    dispatch({\n      type: actionTypes.ADD_ATTRIBUTES_TO_SELECTION,\n      data: data\n    });\n  };\n}\nfunction addSetToSelection(setArray) {\n  const data = [];\n  setArray.forEach(attrObj => {\n    Object.keys(attrObj).map(key => {\n      // console.log(`will fetch key ${key} from` )\n      data.push(new _model_userSelection__WEBPACK_IMPORTED_MODULE_4__[\"default\"](key, attrObj.source));\n      return new _model_userSelection__WEBPACK_IMPORTED_MODULE_4__[\"default\"](key, attrObj[key]);\n    });\n  });\n  return dispatch => {\n    dispatch({\n      type: actionTypes.ADD_SET_TO_ATTRIBUTES_SELECTION,\n      data: data\n    });\n  };\n}\nfunction removeFromSelection(index) {\n  // console.log(`store.js will remove from  seleciton ${index}`);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.REMOVE_ATTRIBUTE_FROM_SELECTION,\n      index: index\n    };\n    dispatch(toDispatch);\n  };\n}\nfunction vcSentToUser() {\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.VC_SENT_TO_USER\n    };\n    dispatch(toDispatch);\n  };\n}\nfunction increaseCardIndex() {\n  // console.log(`store.js will remove from  seleciton ${index}`);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.INCREASE_CARD_INDEX\n    };\n    dispatch(toDispatch);\n  };\n}\nfunction decreaseCardIndex() {\n  // console.log(`store.js will remove from  seleciton ${index}`);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.DECREASE_CARD_INDEX\n    };\n    dispatch(toDispatch);\n  };\n}\nfunction requestVCgeneration(url, selectedAttributes, vcType, isMobile = false) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    let bodyFormData = new FormData();\n    bodyFormData.set(\"data\", selectedAttributes);\n    console.log(\"store.js - requestVCgeneration:: will make VC generation request\");\n    console.log(`store.js - requestVCgeneration:: for the url ${url}`); // console.log(`store.js - requestVCgeneration:: with data`)\n    // console.log(selectedAttributes);\n    // console.log(isMobile);\n\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(url, {\n      data: selectedAttributes,\n      vcType: vcType,\n      isMobile: isMobile\n    }).then(data => {\n      console.log(\"store.js- requestVCgeneration:: got the data form the server\");\n      console.log(data.data);\n      console.log(\"store.js- requestVCgeneration:: got vcType\");\n      console.log(vcType);\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data,\n        vcType: vcType\n      });\n    });\n  };\n}\nfunction makeConnectionRequest() {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(\"/makeConnectionRequest\", {}).then(data => {\n      console.log(\"store.js:: makeConnectionRequest got the data form the server\");\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data\n      });\n    });\n  };\n}\nfunction completeDIDAuth(uuid) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_DID_TRUE,\n      data: uuid\n    });\n  };\n}\nfunction makeAndPushVC(url, selectedAttributes, vcType, sealSession, isMobile = false) {\n  return dispatch => {\n    let bodyFormData = new FormData();\n    bodyFormData.set(\"data\", selectedAttributes);\n    console.log(\"store.js - makeAndPushVC:: will make VC generation request\");\n    console.log(`store.js :: makeandpushVC:: ${url}, and ${vcType}`);\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(url, {\n      data: selectedAttributes,\n      sealSession: sealSession,\n      vcType: vcType,\n      isMobile: isMobile\n    }).then(data => {\n      console.log(\"store.js- makeAndPushVC:: got the data form the server\");\n      dispatch({\n        type: actionTypes.VC_SENT_TO_USER\n      });\n    }).catch(err => {\n      console.log(\"store.js- makeAndPushVC:: ERROR\");\n      console.log(err);\n      dispatch({\n        type: actionTypes.VC_ISSUE_FAILED\n      });\n    }); //TODO add here an action denoting that the VC was sent\n  };\n} // export function makeAndPushVCJolo(\n//   url,\n//   selectedAttributes,\n//   vcType,\n//   sealSession,\n//   isMobile = false\n// ) {\n//   return (dispatch) => {\n//     let bodyFormData = new FormData();\n//     bodyFormData.set(\"data\", selectedAttributes);\n//     axios\n//       .post(url, {\n//         data: selectedAttributes,\n//         sealSession: sealSession,\n//         vcType: vcType,\n//         isMobile: isMobile,\n//       })\n//       .then((resp) => {\n//         console.log(resp)\n//         dispatch({ type: actionTypes.JOLO_VC_GENERATED, data: resp.data.qr });\n//       })\n//       .catch((err) => {\n//         console.log(\"store.js- makeAndPushVC:: ERROR\");\n//         console.log(err);\n//         dispatch({ type: actionTypes.VC_ISSUE_FAILED });\n//       });\n//   };\n// }\n\nfunction requestVC(url, vcType, sessionId, isMobile = false) {\n  return dispatch => {\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(url, {\n      sessionId: sessionId,\n      vcType: vcType,\n      isMobile: isMobile\n    }).then(resp => {\n      console.log(\"store.js requestVC_response\");\n      console.log(resp);\n      dispatch({\n        type: actionTypes.JOLO_VC_GENERATED,\n        data: resp.data.qr\n      });\n    }).catch(err => {\n      console.log(\"store.js- makeAndPushVC:: ERROR\");\n      console.log(err);\n      dispatch({\n        type: actionTypes.VC_ISSUE_FAILED\n      });\n    });\n  };\n}\nfunction setSealSession(sessionId) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_SEAL_SESSION,\n      data: sessionId\n    });\n  };\n}\nfunction setSessionId(sessionId) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_SESSION_ID,\n      data: sessionId\n    });\n  };\n}\nfunction makeSealSession(baseUrl) {\n  console.log(\"store:: makeSealSession\");\n  return dispatch => {\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(`${baseUrl}seal/start-session`, {}).then(resp => {\n      console.log(\"store.js:: makeSealSession\"); // console.log(resp.data);\n\n      return dispatch({\n        type: actionTypes.SET_SEAL_SESSION,\n        data: resp.data\n      });\n    });\n  };\n}\nfunction makeOnlyConnectionRequest(sealSession, baseUrl, vcType = \"didAuth\", isMobile) {\n  let postData = {\n    sealSession: sealSession,\n    vcType: vcType\n  };\n\n  if (isMobile) {\n    postData.isMobile = isMobile;\n  }\n\n  return dispatch => {\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(`${baseUrl}/makeConnectionRequest`, postData).then(data => {\n      console.log(\"store.js -- onlyConnectionRequest:: got the data form the server\");\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data\n      });\n    });\n  };\n}\nfunction makeSealSessionWithDIDConnecetionRequest(baseUrl, vcType, isMobile) {\n  console.log(`store.js:: makeSealSessionWithDIDConnecetionRequest  the base url is-->${baseUrl}<--`);\n  return dispatch => {\n    let sessionId = \"\";\n    let postUrl = baseUrl ? `${baseUrl}seal/start-session` : `/seal/start-session`;\n    axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(postUrl, {}).then(resp => {\n      sessionId = resp.data;\n      return dispatch({\n        type: actionTypes.SET_SEAL_SESSION,\n        data: resp.data\n      });\n    }).then(obj => {\n      // console.log(\"makeSealSessionWithDIDConnecetionRequest\")\n      console.log(`isMobile? ${isMobile}`);\n      let postUrl = baseUrl ? `${baseUrl}makeConnectionRequest` : `/makeConnectionRequest`;\n      axios__WEBPACK_IMPORTED_MODULE_3___default.a.post(postUrl, {\n        sealSession: sessionId,\n        baseUrl: baseUrl,\n        vcType: vcType,\n        isMobile: isMobile\n      }).then(data => {\n        return dispatch({\n          type: actionTypes.GET_QR_AUTH_RESPONSE,\n          data: data.data\n        });\n      });\n    });\n  };\n}\nfunction setDidCallback(callback) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_CALLBACK,\n      data: callback\n    });\n  };\n}\nfunction setEidasUriPort(uri, port) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_EIDAS_URI_PORT,\n      data: {\n        uri: uri,\n        port: port\n      }\n    });\n  };\n}\nfunction setEidasRedirectUri(uri) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_EIDAS_REDIRECT_URI,\n      data: uri\n    });\n  };\n}\nfunction setEdugainRedirectUri(uri) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_EDUGAIN_REDIRECT_URI,\n      data: uri\n    });\n  };\n}\nfunction setEdugainUriPort(uri, port) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_EDUGAIN_URI_PORT,\n      data: {\n        uri: uri,\n        port: port\n      }\n    });\n  };\n}\nconst initializeStore = (preloadedState = initialState) => {\n  return Object(redux__WEBPACK_IMPORTED_MODULE_0__[\"createStore\"])(reducer, preloadedState, Object(redux_devtools_extension__WEBPACK_IMPORTED_MODULE_1__[\"composeWithDevTools\"])(Object(redux__WEBPACK_IMPORTED_MODULE_0__[\"applyMiddleware\"])(redux_thunk__WEBPACK_IMPORTED_MODULE_2___default.a)));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./store.js\n");

/***/ }),

/***/ 0:
/*!****************************************!*\
  !*** multi private-next-pages/_app.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! private-next-pages/_app.js */"./pages/_app.js");


/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-redux":
/*!******************************!*\
  !*** external "react-redux" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-redux");

/***/ }),

/***/ "redux":
/*!************************!*\
  !*** external "redux" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),

/***/ "redux-devtools-extension":
/*!*******************************************!*\
  !*** external "redux-devtools-extension" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux-devtools-extension");

/***/ }),

/***/ "redux-thunk":
/*!******************************!*\
  !*** external "redux-thunk" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux-thunk");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,