{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nvar SSE = /*#__PURE__*/function (_React$Component) {\n  _inherits(SSE, _React$Component);\n\n  var _super = _createSuper(SSE);\n\n  function SSE(props) {\n    var _this;\n\n    _classCallCheck(this, SSE);\n\n    _this = _super.call(this, props);\n    _this.dispatch = props.dispatch;\n    _this.session = props.session;\n    return _this;\n  }\n\n  _createClass(SSE, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.eventSource = new EventSource(\"/events\"); //listening for \"event\" type events\n      // as set by the server at ::  res.write(`event: event\\n`);\n\n      this.eventSource.addEventListener(\"event\", function (evt) {\n        var data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n        // Use data here\n\n        var eventData = JSON.parse(data);\n        console.log(eventData);\n\n        if (eventData.sessionId && _this2.props.serverSessionId) {\n          console.log(\"SSE.js -- componentDidMount:: got \".concat(eventData.sessionId, \" and the current session id is \").concat(_this2.props.serverSessionId));\n\n          if (eventData.sessionId === _this2.props.serverSessionId) {\n            console.log(\"SSE.js -- componentDidMount:: sessionsMatch!!\");\n            console.log(\"SSE.js -- componentDidMount:: uuid: \".concat(eventData.uuid));\n\n            _this2.props.didAuthOK(eventData.uuid, _this2.props.sealSession);\n          }\n        } // if there is no current session in the client\n        // and the server sends a new session event\n\n\n        if (!_this2.props.uuid) {\n          console.log(\" no active session found!\");\n        } else {\n          console.log(\"SSE.js:: found uuid \".concat(_this2.props.uuid));\n          console.log(\"SSE.js:: sent status \".concat(eventData.status)); //check if event is about this client\n\n          if (_this2.props.uuid === eventData.uuid) {\n            switch (eventData.status) {\n              case \"sent\":\n                console.log(\"SSE.js:: VC sent to user\");\n\n                _this2.props.vcSent();\n\n                return \"\";\n\n              default:\n                console.log(\"SSE.js:: default\");\n            }\n          } else {\n            console.log(\"SSE.js:: the uuid is about \".concat(eventData.uuid, \" but i have \").concat(_this2.props.uuid));\n          }\n        }\n      }, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null);\n    } //..render...\n\n  }]);\n\n  return SSE;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    vcSent: function vcSent() {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: function didAuthOK(uuid, sealSession) {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);","map":{"version":3,"sources":["/home/ni/code/js/jolo-issuer-v2/components/Sse.js"],"names":["React","connect","vcSentToUser","completeDIDAuth","SSE","props","dispatch","session","eventSource","EventSource","addEventListener","evt","data","JSON","parse","eventData","console","log","sessionId","serverSessionId","uuid","didAuthOK","sealSession","status","vcSent","Component","mapStateToProps","state","serverSession","sessionStatus","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nclass SSE extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.session = props.session;\n  }\n\n  componentDidMount() {\n    this.eventSource = new EventSource(`/events`);\n    //listening for \"event\" type events\n    // as set by the server at ::  res.write(`event: event\\n`);\n\n    this.eventSource.addEventListener(\n      \"event\",\n      evt => {\n        const data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n        // Use data here\n        let eventData = JSON.parse(data);\n        console.log(eventData);\n\n        if (eventData.sessionId && this.props.serverSessionId) {\n          console.log(\n            `SSE.js -- componentDidMount:: got ${eventData.sessionId} and the current session id is ${this.props.serverSessionId}`\n          );\n          if (eventData.sessionId === this.props.serverSessionId) {\n            console.log(`SSE.js -- componentDidMount:: sessionsMatch!!`);\n            console.log(\n              `SSE.js -- componentDidMount:: uuid: ${eventData.uuid}`\n            );\n            this.props.didAuthOK(eventData.uuid, this.props.sealSession);\n          }\n        }\n\n        // if there is no current session in the client\n        // and the server sends a new session event\n        if (!this.props.uuid) {\n          console.log(\" no active session found!\");\n        } else {\n          console.log(`SSE.js:: found uuid ${this.props.uuid}`);\n          console.log(`SSE.js:: sent status ${eventData.status}`);\n          //check if event is about this client\n          if (this.props.uuid === eventData.uuid) {\n            switch (eventData.status) {\n              case \"sent\":\n                console.log(\"SSE.js:: VC sent to user\");\n                this.props.vcSent();\n                return \"\";\n              default:\n                console.log(\"SSE.js:: default\");\n            }\n          } else {\n            console.log(\n              `SSE.js:: the uuid is about ${eventData.uuid} but i have ${this.props.uuid}`\n            );\n          }\n        }\n      },\n      false\n    );\n  }\n\n  render() {\n    return <div></div>;\n  }\n\n  //..render...\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus\n    // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    vcSent: () => {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: (uuid, sealSession) => {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);\n"]},"metadata":{},"sourceType":"module"}